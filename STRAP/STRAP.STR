# STRAP compiler in STRAP. 
# We run over the input file twice: first to calculate the addresses of all
# labels, second to actually emit all the bytes in a single pass.

@main

:panic [
        0x0E            # PUSH CS
        0x1F            # POP DS
        0xBA $panic_msg # MOV DX, panic_msg
        0xB4 0x09       # MOV AH, 9
        0xCD 0x21       # INT 0x21
:exit
        0xCD 0x20       # INT 20
]
:panic_msg [ 'P'a'n'i'c'$ ]
# Pop a number, if zero - panic
:if_panic :0 { $;
        $? {} { panic }
}

# This is a simplistic sequential allocator with no way to free memory
# The memory comes from the area between the executable code (heap_start is
# defined at the very end of the executable) and the stack.
# Pops the number of bytes to allocate, pushes address.
:alloc :0 { $;
        $heap_ptr $/ @1 @0 + $heap_ptr $* @=0 $:
}
:heap_ptr [ $heap_start ]

# Pops a pointer to a string, pushes a pointer to a copy
:strdup :0 { $;
        0
        $@ { @0 @1 + $- } { @1 1 + @=1 }
        @1 1 + alloc
        0 @=1
        $@ { @0 @1 + $- } {
                @0 @1 + $- @2 @1 + $+
                @1 1 + @=1
        }
        0 @2 @1 + $+
        @2 @=0 $:
}

# Pops two strings and pushes -1, 0, or 1.
:strcmp :0 { $; $;
        $@ {
                @0 $- $? { 1 } { 0 }
                @1 $- $? { 1 } { 0 } 
                @0 $- @1 $- = & & 
        } {
                @0 1 + @=0
                @1 1 + @=1
        }
        @0 $- @1 $- < $? { 1 ` } {
                @1 $- @0 $- < $? { 1 } { 0 }
        }
        @=0 $:
}

# Global variables containing file handles for the input and output files.
:in_handle [ $0 ]
:out_handle [ $0 ]

# Are we just calculating offsets (0) or actually emitting bytes (1)?
:emit_mode [ 0 ]

# Current value of the Instruction Pointer. In COM this starts at 0x100.
:cur_ip [ $0 ]

# Pops filename, pushes file handle and 1 or error and 0.
:creat_file [
        0x5B           # POP BX
        0x5A           # POP DX
        0x33 0xC9      # XOR CX, CX
        0xB4 0x3C      # MOV AH, 0x3C
        0xCD 0x21      # INT 0x21
        0x50           # PUSH AX
        0x33 0xC0      # XOR AX, AX
        0x72 0x01      # JC error
        0x40           # INC AX
        0x50           # error: PUSH AX
        0x53           # PUSH BX
        0xC3           # RET
]

# Pops filename, pushes file handle and 1 or error and 0.
:open_file [
        0x5B           # POP BX
        0x5A           # POP DX
        0x32 0xC0      # XOR AL, AL
        0xB4 0x3D      # MOV AH, 0x3D
        0xCD 0x21      # INT 0x21
        0x50           # PUSH AX
        0x33 0xC0      # XOR AX, AX
        0x72 0x01      # JC error
        0x40           # INC AX
        0x50           # error: PUSH AX
        0x53           # PUSH BX
        0xC3           # RET
]

# Pops file handle, pushes 1 upon success or 0 on error.
:rewind_file [
        0x5E           # POP SI
        0x5B           # POP BX
        0x32 0xC0      # XOR AL, AL
        0x33 0xC9      # XOR CX, CX
        0x33 0xD2      # XOR DX, DX
        0xB4 0x42      # MOV AH, 0x42
        0xCD 0x21      # INT 0x21
        0x33 0xC0      # XOR AX, AX
        0x72 0x01      # JC error
        0x40           # INC AX
        0x50           # PUSH AX
        0x56           # PUSH SI
        0xC3           # RET
]

# Pops file handle, pushes 1 upon success or 0 on error.
:close_file [
        0x5E           # POP SI
        0x5B           # POP BX
        0xB4 0x3E      # MOV AH, 0x3E
        0xCD 0x21      # INT 0x21
        0x33 0xC0      # XOR AX, AX
        0x72 0x01      # JC error
        0x40           # INC AX
        0x50           # error: PUSH AX
        0x56           # PUSH SI
        0xC3           # RET
]

# Pops a file handle and a character
:write_byte [
        0x5E           # POP SI
        0x5B           # POP BX
        0x58           # POP AX
        0xA2 $buffer   # MOV [buffer], AL
        0xBA $buffer   # MOV DX, buffer
        0xB9 0x01 0x00 # MOV CX, 1
        0xB4 0x40      # MOV AH, 0x40
        0xCD 0x21      # INT 0x21
        0x73 0x02      # JNC over
        @panic         # jmp panic
        0x56           # over: PUSH SI
        0xC3           # RET
]
# Pops a file handle and pushes a character
:read_byte [
        0x5E           # POP SI
        0x5B           # POP BX
        0x30 0xC0      # XOR AL, AL
        0xA2 $buffer   # MOV [buffer], AL
        0xBA $buffer   # MOV DX, buffer
        0xB9 0x01 0x00 # MOV CX, 1
        0xB4 0x3F      # MOV AH, 0x3F
        0xCD 0x21      # INT 0x21
        0x73 0x02      # JNC over
        @panic         # jmp panic
        0x30 0xE4      # XOR AH, AH
        0xA0 $buffer   # MOV AL, [buffer]
        0x50           # PUSH AX
        0x56           # PUSH SI
        0xC3           # RET
]
:buffer [ 0 ]

# Pop a byte and emit it (depending on EMIT_MODE). 
:emit_byte :0 { $;
        $cur_ip $/ 1 + $cur_ip $*
        $emit_mode $-
        $? { @0 $out_handle $/ write_byte } {}
}
# Pop a word and emit it
:emit_word :0 { $;
        , emit_byte 0x100 / emit_byte
}
# Pop a pointer to the array end, and to the array start, and emit the array.
:emit_array :0 { $; $;
        $@ { @0 @1 = 1 ^ } {
                @0 $- emit_byte
                @0 1 + @=0
        }
}

# A function to read a single character from the input handle with support for
# "unreading" a character once.
:unpeeked [ 0 ]
:is_unpeeked [ 0 ]
# Push the read character
:peek :0 {
        $is_unpeeked $- $? {
                0 $is_unpeeked $+
                $unpeeked $-
        } {
                $in_handle $/ read_byte
        }
        $:
}
# Pops the unread character
:unpeek :0 { $;
        $unpeeked $+
        1 $is_unpeeked $+
}

# Read a proper number (decimal or hexadecimal) from the input handle.
# Pushes the read number.
:read_num :0 {
        peek
        @0 '0 = $? {
                peek @=0
                @0 'x = @0 'X = | $? { read_num_hex @=0 $: } { @read_num_dec }
        } {
                :read_num_dec
                0
                $@ { @0 is_digit } {
                        @1 10 * @0 '0 - + @=1
                        peek @=0
                }
                @0 unpeek
                @1 @=0 $:
        }
}
:read_num_hex :0 {
        peek
        0
        $@ { @0 is_hexdigit } {
                @1 0x10 * @0 hexdigit + @=1
                peek @=0
        }
        @0 unpeek
        @1 @=0 $:
}

:is_space :0 { $;
        @0 0x09 =
        @0 0x0A =
        @0 0x0D =
        @0 '  =
        | | | @=0 $:
}

:is_ident :0 { $;
        @0 '_ =
        @0 '0 < '9 @0 < | 1 ^
        @0 'a < 'z @0 < | 1 ^
        @0 'A < 'Z @0 < | 1 ^
        | | | @=0 $:
}

:is_digit :0 { $;
        @0 '0 < '9 @0 < | 1 ^ @=0 $:
}

:is_hexdigit :0 { $;
        @0 '0 < '9 @0 < |
        @0 'a < 'f @0 < |
        @0 'A < 'F @0 < |
        & & 1 ^ @=0 $:
}

:hexdigit :0 { $;
        @0 '0 < '9 @0 < | $? {
                @0 'a < 'f @0 < | $? { 'A } { 'a } 0xA -
        } { '0 }
        - $:
}

# If the token was a number, this is where its numeric value would be stored.
:token_num [ $0 ]
# If the token was an identifier, this is where its characters would be 
# stored. Currently a fixed buffer of 128 bytes.
:token_str [
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
]
:read_ident :0 {
        peek
        0
        $@ { @0 is_ident } {
                @0 $token_str @1 + $+
                @1 1 + @=1
                peek @=0
        }
        @0 unpeek
        0 $token_str @1 + $+
}

:read_token :0 {
        :read_token_again
        peek
        $@ { @0 is_space } { peek @=0 }
        @0 '# = $? {
                $@ { @0 0 = @0 0x0A = | 1 ^ } { peek @=0 }
                . @read_token_again
        } {}
        
        @0 is_digit $? {
                @0 unpeek
                read_num $token_num $*
                256 @=0
        } {
                @0 is_ident $? {
                        @0 unpeek
                        read_ident
                        257 @=0
                } {
                        @0 '' = $? {
                                peek
                                @1 $token_num $*
                                256 @=0
                        } {}
                }
        }
        $:
}
f
# A singly linked list of labels. A label is a 3-word structure, where the
# first word is the "next" pointer, the second word is a pointer to the copied 
# string that is the identifier's name, and the third word is the address the 
# label points to.
:labels [ $0 ]

# Pops the address and the name of the label.
:add_label :0 { $; $;
        6 alloc
        $labels $/ @2 $*
        @0 strdup @2 2 + $*
        @1 @2 4 + $*
        @2 $labels $*
}

# Pops the name, pushes the address.
:find_label :0 { $;
        $labels $/
        :find_label_again
        @1 $? {
                @0 @1 2 + $/ strcmp $? {
                        @1 $/ @=1
                        @find_label_again
                } {
                        @1 4 + $/
                }
        } {
                0
        }
        @=0 $:
}

# An "ilabel" is a compiler-generated label that is indexed by a number and
# not a string. It has the same 3-word structure but the second word is the  
# index.
:ilabels [ $0 ]
# Pops the address and the index.
:add_ilabel :0 { $; $;
        6 alloc
        $ilabels $/ @2 $*
        @0 @2 2 + $*
        @1 @2 4 + $*
        @2 $ilabels $*
}

# Pops the index, pushes the address.
:find_ilabel :0 { $;
        $ilabels $/
        :find_ilabel_again
        @1 $? {
                @0 @1 2 + $/ = $? {
                        @1 4 + $/
                } {
                        @1 $/ @=1
                        @find_ilabel_again
                }
        } {
                0
        }
        @=0 $:
}

# This number is reset between passes so indices from the first pass exactly 
# coincide with indices from the second pass.
:cur_index [ $0 ]
# Pushes the next index.
:next_index :0 {
        $cur_index $/ , 1 + $cur_index $* $:
}

:read_data_block :0 {
        :read_data_block_again
        read_token
        @0 0 = @0 '] = | $? { @read_data_block_end } {}
        @0 256 = $? {
                $token_num $/ emit_byte
        } {
                @0 257 = $? {
                        $token_str find_label emit_byte
                } {
                        @0 '$ = $? { read_data_dollar } {
                                @0 read_common
                        }
                }
        }
        .
        @read_data_block_again
        :read_data_block_end
}

:read_data_dollar :0 {
        read_token 
        @0 256 = $? {
                $token_num $/ emit_word
        } {
                @0 257 = $? {
                        $token_str find_label emit_word
                } {
                        @0 0 = @0 '] = | $? { panic } {}
                        read_common_dollar
                }
        }
}

:read_text_block :0 {
        :read_text_block_again
        read_token
        @0 0 = @0 '} = | $? { @read_text_block_end } {}
        @0 256 = $? {
                0xB8 emit_byte
                $token_num $/ emit_word
                0x50 emit_byte
        } {
                @0 257 = $? {
                        0xE8 emit_byte
                        $token_str find_label
                        $cur_ip $/ - 2 - emit_word
                } {
                        @0 '$ = $? { read_text_dollar } {
                                @0 read_common
                        }
                }
        }
        .
        @read_text_block_again
        :read_text_block_end
}

:read_text_dollar :0 {
        read_token 
        @0 257 = $? {
                0xB8 emit_byte
                $token_str find_label emit_word
                0x50 emit_byte
        } {
                @0 0 = @0 '] = | $? { panic } {}
                @0 read_common_dollar
        }

}

:mod_arr [ 89 51 65490 88 65527 65521 82 ] :mod_arr_end
:and_arr [ 88 89 35 65473 80 ] :and_arr_end
:mul_arr [ 88 90 65527 65506 80 ] :mul_arr_end
:add_arr [ 88 89 3 65473 80 ] :add_arr_end
:dup_arr [ 88 80 80 ] :dup_arr_end
:sub_arr [ 89 88 43 65473 80 ] :sub_arr_end
:pop_arr [ 88 ] :pop_arr_end
:div_arr [ 89 51 65490 88 65527 65521 80 ] :div_arr_end
:lt_arr [ 89 88 51 65490 59 65473 115 1 66 82 ] :lt_arr_end
:eq_arr [ 88 89 51 65490 59 65473 117 1 66 82 ] :eq_arr_end
:xor_arr [ 88 89 51 65473 80 ] :xor_arr_end
:neg_arr [ 88 65527 65496 80 ] :neg_arr_end
:or_arr [ 88 89 11 65473 80 ] :or_arr_end
:not_arr [ 88 65527 65488 80 ] :not_arr_end

:char_arrs [
        '% $mod_arr $mod_arr_end
        '& $and_arr $and_arr_end
        '* $mul_arr $mul_arr_end
        '+ $add_arr $add_arr_end
        ', $dup_arr $dup_arr_end
        '- $sub_arr $sub_arr_end
        '. $pop_arr $pop_arr_end
        '/ $div_arr $div_arr_end
        '< $lt_arr $lt_arr_end
        '= $eq_arr $eq_arr_end
        '^ $xor_arr $xor_arr_end
        '` $neg_arr $neg_arr_end
        '| $or_arr $or_arr_end
        '~ $not_arr $not_arr_end
        0 $0 $0
]

:frame_pro_arr [ 85 65417 65509 65411 65516 ] :frame_pro_arr_end
:frame_epi_arr [ 65417 65516 93 65475 ] :frame_epi_arr_end

:read_common :0 { $;
        @0 ': = $? {
                read_common_colon
                @read_common_end
        } {}
        @0 '@ = $? {
                read_common_at
                @read_common_end
        } {}
        @0 '[ = $? {
                read_data_block
                @read_common_end
        } {}
        @0 '{ = $? {
                read_text_block
                @read_common_end
        } {}

        $char_arrs
        $@ { @1 $- @0 = 1 ^ } {
                @1 $- $? {} { panic }
                @1 5 + @=1
        }
        @1 1 + $/ @1 3 + $/ emit_array

        :read_common_end
}

:read_common_colon :0 {
        read_token
        @0 256 = $? {
                $frame_pro_arr $frame_pro_arr_end emit_array
                $token_num $/ 2 * emit_byte
                read_token
                @1 '{ = $? {} { panic }
                read_text_block
                $frame_epi_arr $frame_epi_arr_end emit_array
        } {
                @0 257 = $? {
                        $token_str $cur_ip $/ add_label
                } { panic }
        }
}

:read_common_at :0 {
        read_token
        @0 '= = $? {
                read_token
                @1 256 = $? {} { panic }
                0x8F emit_byte
                0x46 emit_byte
                $token_num $/ ~ 2 * emit_byte
        } {
                @0 256 = $? {
                        0xFF emit_byte
                        0x76 emit_byte
                        $token_num $/ ~ 2 * emit_byte
                } {
                        @0 257 = $? {
                                0xE9 emit_byte
                                $token_str find_label
                                $cur_ip $/ - 2 - emit_word
                        } { panic }
                }
        }
}

:write_word_arr [ 91 88 65417 7 ] :write_word_arr_end
:write_byte_arr [ 91 88 65416 7 ] :write_byte_arr_end
:read_byte_arr [ 91 65418 31 50 65535 83 ] :read_byte_arr_end
:read_word_arr [ 91 65535 55 ] :read_word_arr_end
:shift_return_arr [ 65419 70 2 65415 70 0 65415 70
                    65534 65417 70 2 65411 65517 2 ] :shift_return_arr_end
:shift_arg_arr [ 65411 65477 2 65419 70 2 65415 70
                 65534 65415 70 0 65417 70 2 ] :shift_arg_arr_end

:dollar_char_arrs [
        '* $write_word_arr $write_word_arr_end
        '+ $write_byte_arr $write_byte_arr_end
        '- $read_byte_arr $read_byte_arr_end
        '/ $read_word_arr $read_word_arr_end
        ': $shift_return_arr $shift_return_arr_end
        '; $shift_arg_arr $shift_arg_arr_end
        0 $0 $0
]

:cond_arr [ 88 65413 65472 116 ] :cond_arr_end

:read_common_dollar :0 { $;
        @0 '$ = $? {
                read_token
                @1 '{ = $? {} { panic }
                next_index
                0xE9 emit_byte
                @2 find_ilabel
                $cur_ip $/ - 2 - emit_word
                read_text_block
                @2 $cur_ip $/ add_ilabel
                @read_common_dollar_end
        } {}
        @0 '? = $? {
                read_if
                @read_common_dollar_end
        } {}
        @0 '@ = $? {
                read_while
                @read_common_dollar_end
        } {}

        $dollar_char_arrs
        $@ { @1 $- @0 = 1 ^ } {
                @1 $- $? {} { panic }
                @1 5 + @=1
        }
        @1 1 + $/ @1 3 + $/ emit_array

        :read_common_dollar_end
}

:read_if :0 {
        read_token
        @0 '{ = $? {} { panic }
        next_index next_index
        $cond_arr $cond_arr_end emit_array
        @1 find_ilabel
        $cur_ip $/ - 1 - emit_byte
        read_text_block
        0xEB emit_byte
        @2 find_ilabel
        $cur_ip $/ - 1 - emit_byte
        @1 $cur_ip $/ add_ilabel
        read_token
        @3 '{ = $? {} { panic }
        read_text_block
        @2 $cur_ip $/ add_ilabel
}

:read_while :0 {
        read_token
        @0 '{ = $? {} { panic }
        next_index next_index
        @1 $cur_ip $/ add_ilabel
        read_text_block
        $cond_arr $cond_arr_end emit_array
        @2 find_ilabel
        $cur_ip $/ - 1 - emit_byte
        read_token
        @3 '{ = $? {} { panic }
        read_text_block
        0xEB emit_byte
        @1 find_ilabel
        $cur_ip $/ - 1 - emit_byte
        @2 $cur_ip $/ add_ilabel
}

:in_name_ptr [ $0 ]
:out_name_ptr [ $0 ]

:main :0 {
        0x81
        $@ { @0 $- '  = } { @0 1 + @=0 }
        @0 $- 0x0D = $? { panic } {}
        @0 $in_name_ptr $*
        $@ { @0 $- '  = 1 ^ } {
                @0 $- 0x0D = $? { panic } {}
                @0 1 + @=0
        }
        0 @0 $+ @0 1 + @=0
        $@ { @0 $- '  = } { @0 1 + @=0 }
        @0 $- 0x0D = $? { panic } {}
        @0 $out_name_ptr $*
        $@ { @0 $- '  = @0 $- 0x0D = | 1 ^ } {
                @0 1 + @=0
        }
        0 @0 $+ @0 1 + @=0
        
        $out_name_ptr $/ creat_file
        $? { $out_handle $* } { panic }
        $in_name_ptr $/ open_file
        $? { $in_handle $* } { panic }
       
        0 $emit_mode $+
        0x100 $cur_ip $*
        0 $cur_index $*
        read_data_block

        $in_handle $/ rewind_file
        $? {} { panic }

        1 $emit_mode $+
        0x100 $cur_ip $*
        0 $cur_index $*
        read_data_block

        $out_handle $/ close_file
        $? {} { panic }
        $in_handle $/ close_file
        $? {} { panic }

        exit
}

:heap_start
