# STRAP compiler in STRAP. 
# We run over the input file twice: first to calculate the addresses of all
# labels, second to actually emit all the bytes in a single pass.
"IO\START.STR"
$"IO\EXIT.STR"
$"IO\PUTCHAR.STR"
$"IO\FORMAT.STR"
$"IO\PUTS.STR"
$"IO\HCREAT.STR"
$"IO\HOPEN.STR"
$"IO\HCLOSE.STR"
$"IO\HGETC.STR"
$"IO\HPUTC.STR"
$"UTIL\STRDUP.STR"
$"UTIL\STRCMP.STR"
$"UTIL\LALLOC.STR"
$"UTIL\CHAR.STR"

:file_error :0 {
        $str_file_error puts
        put_nl
        exit
}

# Global variables containing file handles for the input and output files.
:in_handle [ $0 ]
:out_handle [ $0 ]

# Are we just calculating offsets (0) or actually emitting bytes (1)?
:emit_mode [ 0 ]

# Current position in the file.
:cur_line [ $0 ]
:cur_column [ $0 ]

# Current value of the Instruction Pointer. In COM this starts at 0x100.
:cur_ip [ $0 ]

# Pop a byte and emit it (depending on EMIT_MODE). 
:emit_byte :0 { $;
        $cur_ip $/ 1 + $cur_ip $*
        $emit_mode $-
        $? { $out_handle $/ @0 handle_putc . } {}
}
# Pop a word and emit it
:emit_word :0 { $;
        , emit_byte 0x100 / emit_byte
}
# Pop a pointer to the array end, and to the array start, and emit the array.
:emit_array :0 { $; $;
        $@ { @0 @1 = 1 ^ } {
                @0 $- emit_byte
                @0 1 + @=0
        }
}

# A function to read a single character from the input handle with support for
# "unreading" a character once.
:unpeeked [ 0 ]
:is_unpeeked [ 0 ]
# Push the read character
:peek :0 {
        $is_unpeeked $- $? {
                0 $is_unpeeked $+
                $unpeeked $-
        } {
                $in_handle $/ handle_getc
        }
        @0 0x0A = $? {
                0 $cur_column $*
                $cur_line $/ 1 + $cur_line $*
        } {
                $cur_column $/ 1 + $cur_column $*
        }
        $:
}
# Pops the unread character
:unpeek :0 { $;
        $unpeeked $+
        1 $is_unpeeked $+
        $cur_column $/ 1 - $cur_column $*
}

# Read a proper number (decimal or hexadecimal) from the input handle.
# Pushes the read number.
:read_num :0 {
        peek
        @0 '0 = $? {
                peek @=0
                @0 'x = @0 'X = | $? { read_num_hex @=0 $: } { @read_num_dec }
        } {
                :read_num_dec
                0
                $@ { @0 is_digit } {
                        @1 10 * @0 '0 - + @=1
                        peek @=0
                }
                @0 unpeek
                @1 @=0 $:
        }
}
:read_num_hex :0 {
        peek
        0
        $@ { @0 is_hexdigit } {
                @1 0x10 * @0 hexdigit + @=1
                peek @=0
        }
        @0 unpeek
        @1 @=0 $:
}

# If the token was a number, this is where its numeric value would be stored.
:token_num [ $0 ]
# If the token was an identifier or an include directive, this is where its
# characters would be stored. Currently a fixed buffer of 128 bytes.
:token_str [
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
        $0 $0 $0 $0 $0 $0 $0 $0
]

# Read an identifier from the input handle.
:read_ident :0 {
        peek
        0
        $@ { @0 is_ident } {
                @0 $token_str @1 + $+
                @1 1 + @=1
                peek @=0
        }
        @0 unpeek
        0 $token_str @1 + $+
}

# Read an include directive and the trailing " from the input file.
:read_include :0 {
        peek
        0
        $@ { @0 '" = ` ~ } {
                @0 $token_str @1 + $+
                @1 1 + @=1
                peek @=0
        }
        0 $token_str @1 + $+
}

# Read a token. Pushes the token type which is 256 for numbers, 257 for
# identifiers, and the ASCII code for single character tokens. Note that we
# don't process multi-character operators (like '$?') here.
:read_token :0 {
        :read_token_again
        peek
        $@ { @0 is_space } { peek @=0 }
        @0 '# = $? {
                $@ { @0 0 = @0 0x0A = | 1 ^ } { peek @=0 }
                . @read_token_again
        } {}

        @0 is_digit $? {
                @0 unpeek
                read_num $token_num $*
                256 @=0
        } {
                @0 is_ident $? {
                        @0 unpeek
                        read_ident
                        257 @=0
                } {
                        @0 '' = $? {
                                peek
                                @1 $token_num $*
                                256 @=0
                        } {
                                @0 '" = $? {
                                        read_include
                                        258 @=0
                                } {}
                        }
                }
        }
        $:
}

# A singly linked list of labels. A label is a 3-word structure, where the
# first word is the "next" pointer, the second word is a pointer to the copied 
# string that is the identifier's name, and the third word is the address the 
# label points to.
:labels [ $0 ]

# Pops the address and the name of the label.
:add_label :0 { $; $;
        $labels $/
        $@ { @2 } {
                @0 @2 2 + $/ strcmp $? {} {
                        $emit_mode $- $? {} {
                                put_location
                                $str_redef_label puts
                                @0 puts
                                put_nl
                        }
                }
                @2 $/ @=2
        }
        .

        6 alloc
        $labels $/ @2 $*
        @0 strdup @2 2 + $*
        @1 @2 4 + $*
        @2 $labels $*
}

# Pops the name, pushes the address.
:find_label :0 { $;
        $labels $/
        :find_label_again
        @1 $? {
                @0 @1 2 + $/ strcmp $? {
                        @1 $/ @=1
                        @find_label_again
                } {
                        @1 4 + $/
                }
        } {
                $emit_mode $- $? {
                        put_location
                        $str_undef_label puts
                        @0 puts
                        put_nl
                } {}
                0
        }
        @=0 $:
}

# An "ilabel" is a compiler-generated label that is indexed by a number and
# not a string. It has the same 3-word structure but the second word is the  
# index.
:ilabels [ $0 ]
# Pops the address and the index.
:add_ilabel :0 { $; $;
        6 alloc
        $ilabels $/ @2 $*
        @0 @2 2 + $*
        @1 @2 4 + $*
        @2 $ilabels $*
}

# Pops the index, pushes the address.
:find_ilabel :0 { $;
        $ilabels $/
        :find_ilabel_again
        @1 $? {
                @0 @1 2 + $/ = $? {
                        @1 4 + $/
                } {
                        @1 $/ @=1
                        @find_ilabel_again
                }
        } {
                0
        }
        @=0 $:
}

# This number is reset between passes so indices from the first pass exactly 
# coincide with indices from the second pass.
:cur_index [ $0 ]
# Pushes the next index.
:next_index :0 {
        $cur_index $/ , 1 + $cur_index $* $:
}

# A singly linked list of included files, to avoid including a file
# multiple times, if necessary. Consists of 2 words: next pointer, and
# pointer to copied string.
:included [ $0 ]
# Pops a string and checks if it is in the included list. If it isn't, makes a
# copy and adds it to the list. Pushes either the made copy and 0, or the
# existing instance of the string in the list and 1.
:test_add_included :0 { $;
        $included $/
        :included_again
        @1 $? {
                @0 @1 2 + $/ strcmp $? {
                        @1 $/ @=1
                        @included_again
                } {
                        @1 2 + $/ @=0
                        1 @=1
                }
        } {
                4 alloc
                $included $/ @2 $*
                @0 strdup , @=0 @2 2 + $*
                @2 $included $*
                0 @=1
        }
        $: $:
}

# Read a data block from the input handle and emit the corresponding code.
:read_data_block :0 {
        :read_data_block_again
        read_token
        @0 0 = @0 '] = | $? { @read_data_block_end } {}
        @0 256 = $? {
                $token_num $/ emit_byte
                . @read_data_block_again
        } {}
        @0 257 = $? {
                $token_str find_label emit_byte
                . @read_data_block_again
        } {}
        @0 258 = $? {
                $token_str test_add_included . include_file
                . @read_data_block_again
        } {}
        @0 '$ = $? {
                read_data_dollar
        } {
                @0 read_common
        }
        . @read_data_block_again
        :read_data_block_end
}

:read_data_dollar :0 {
        read_token 
        @0 256 = $? {
                $token_num $/ emit_word
                @read_data_dollar_end
        } {}
        @0 257 = $? {
                $token_str find_label emit_word
                @read_data_dollar_end
        } {}
        @0 258 = $? {
                $token_str test_add_included $? {
                        .
                } {
                        include_file
                }
                @read_data_dollar_end
        } {}
        @0 0 = @0 '] = | $? {
                put_location
                $str_dollar_eob puts
                put_nl
                exit
        } {}
        read_common_dollar
        :read_data_dollar_end
}

:is_push_ax [ 0 ]
:push_ax :0 { 
        $is_push_ax $- $? {
                0x50 emit_byte  # PUSH AX
        } {
                1 $is_push_ax $+
        }
}

:fence_push :0 {
        $is_push_ax $- $? {
                0x50 emit_byte  # PUSH AX
                0 $is_push_ax $+
        } {}
}

:pop_ax :0 {
        $is_push_ax $- $? {
                0 $is_push_ax $+
        } {
                0x58 emit_byte # POP AX
        }
}

# Read a text block from the input handle and emit the corresponding code.
:read_text_block :0 {
        :read_text_block_again
        read_token
        @0 0 = @0 '} = | $? { @read_text_block_end } {}
        @0 256 = $? {
                fence_push
                0xB8 emit_byte           # MOV AX,
                $token_num $/ emit_word  #         $token_num
                push_ax
                . @read_text_block_again
        } {}
        @0 257 = $? {
                fence_push
                0xE8 emit_byte  # CALL <id>
                $token_str find_label
                $cur_ip $/ - 2 - emit_word
                . @read_text_block_again
        } {}
        @0 258 = $? {
                $token_str test_add_included . include_file
                . @read_text_block_again
        } {}
        @0 '$ = $? {
                read_text_dollar
        } {
                @0 read_common
        }
        . @read_text_block_again
        :read_text_block_end
        fence_push
}

:read_text_dollar :0 {
        read_token 
        @0 257 = $? {
                fence_push
                0xB8 emit_byte                   # MOV AX,
                $token_str find_label emit_word  #         <id>
                push_ax
        } {
                @0 0 = @0 '] = | $? {
                        put_location
                        $str_dollar_eob puts
                        put_nl
                        exit
                } {}
                @0 read_common_dollar
        }
}

# Data for operations that compile to a fixed sequence of instructions.
:mod_arr [
        0x59           # POP CX
        0x33 0xD2      # XOR DX, DX
        0x58           # POP AX
        0xF7 0xF1      # DIV CX
        0x52           # PUSH DX
] :mod_arr_end
:and_arr [ 
        0x59           # POP CX
        0x23 0xC1      # AND AX, CX
] :and_arr_end
:mul_arr [ 
        0x5A           # POP DX
        0xF7 0xE2      # MUL DX
] :mul_arr_end
:add_arr [
        0x59           # POP CX
        0x03 0xC1      # ADD AX, CX
] :add_arr_end
:dup_arr [ 
        0x50           # PUSH AX
] :dup_arr_end
:sub_arr [
        0x59           # POP CX
        0x58           # POP AX
        0x2B 0xC1      # SUB AX, CX
] :sub_arr_end
:pop_arr [
] :pop_arr_end
:div_arr [
        0x59           # POP CX
        0x33 0xD2      # XOR DX, DX
        0x58           # POP AX
        0xF7 0xF1      # DIV CX
] :div_arr_end
:lt_arr [ 
        0x59           # POP CX
        0x33 0xD2      # XOR DX, DX
        0x39 0xC1      # CMP CX, AX
        0x73 0x01      # JNB not_less
        0x42           # INC DX
        0x52           # not_less: PUSH DX
] :lt_arr_end
:eq_arr [ 
        0x59           # POP CX
        0x33 0xD2      # XOR DX, DX
        0x39 0xC1      # CMP CX, AX
        0x75 0x01      # JNB not_eq
        0x42           # INC DX
        0x52           # not_eq: PUSH DX
] :eq_arr_end
:xor_arr [
        0x59           # POP CX
        0x33 0xC1      # XOR AX, CX
] :xor_arr_end
:neg_arr [
        0xF7 0xD8      # NEG AX
] :neg_arr_end
:or_arr [ 
        0x59           # POP CX
        0x0B 0xC1      # OR AX, CX
] :or_arr_end
:not_arr [
        0xF7 0xD0      # NOT AX
] :not_arr_end

# The last 2 boolean flags are whether the sequence assumes the top of the
# stack initially to be in AX, and whether it leaves the top of the stack
# in AX.
:char_arrs [
        '% $mod_arr $mod_arr_end 0 0
        '& $and_arr $and_arr_end 1 1
        '* $mul_arr $mul_arr_end 1 1
        '+ $add_arr $add_arr_end 1 1
        ', $dup_arr $dup_arr_end 1 1
        '- $sub_arr $sub_arr_end 0 1
        '. $pop_arr $pop_arr_end 1 0
        '/ $div_arr $div_arr_end 0 1
        '< $lt_arr $lt_arr_end 1 0
        '= $eq_arr $eq_arr_end 1 0
        '^ $xor_arr $xor_arr_end 1 1
        '` $neg_arr $neg_arr_end 1 1
        '| $or_arr $or_arr_end 1 1
        '~ $not_arr $not_arr_end 1 1
        0 $0 $0 0 0
]

# Frame prologue and epilogue.
:frame_pro_arr [
        0x55           # PUSH BP
        0x89 0xE5      # MOV BP, SP
        0x83 0xEC      # SUB SP, ...
] :frame_pro_arr_end
:frame_epi_arr [
        0x89 0xEC      # MOV SP, BP
        0x5D           # POP BP
        0xC3           # RET
] :frame_epi_arr_end

:read_common :0 { $;
        @0 ': = $? {
                read_common_colon
                @read_common_end
        } {}
        @0 '@ = $? {
                read_common_at
                @read_common_end
        } {}
        @0 '[ = $? {
                read_data_block
                @read_common_end
        } {}
        @0 '{ = $? {
                read_text_block
                @read_common_end
        } {}

        $char_arrs
        $@ { @1 $- @0 = 1 ^ } {
                @1 $- $? {} {
                        put_location
                        $str_unknown_cmd puts
                        @0 putchar
                        put_nl
                        @read_common_end
                }
                @1 7 + @=1
        }
        @1 5 + $- $? { pop_ax } { fence_push }
        @1 1 + $/ @1 3 + $/ emit_array
        @1 6 + $- $? { push_ax } {}

        :read_common_end
}

:read_common_colon :0 {
        read_token
        @0 256 = $? {
                fence_push
                $frame_pro_arr $frame_pro_arr_end emit_array
                $token_num $/ 2 * emit_byte
                read_token
                @1 '{ = $? {} {
                        put_location
                        $str_frame_unknown puts
                        put_nl
                        exit
                }
                read_text_block
                fence_push
                $frame_epi_arr $frame_epi_arr_end emit_array
        } {
                @0 257 = $? {
                        fence_push
                        $token_str $cur_ip $/ add_label
                } {
                        put_location
                        $str_colon_unknown puts
                        put_nl
                        exit
                }
        }
}

:read_common_at :0 {
        read_token
        @0 '= = $? {
                read_token
                @1 256 = $? {} {
                        put_location
                        $str_toloc_unknown puts
                        put_nl
                        exit
                }
                fence_push
                0x8F emit_byte                 #
                0x46 emit_byte                 # POP [BP-<offset>]
                $token_num $/ ~ 2 * emit_byte  #
                @read_common_at_end
        } {}
        @0 256 = $? {
                fence_push
                0xFF emit_byte                 #
                0x76 emit_byte                 # PUSH [BP-<offset>]
                $token_num $/ ~ 2 * emit_byte  #
                @read_common_at_end
        } {}
        @0 257 = $? {
                fence_push
                0xE9 emit_byte              #
                $token_str find_label       # JMP <id>
                $cur_ip $/ - 2 - emit_word  #
                @read_common_at_end
        } {}
        put_location
        $str_at_unknown puts 
        put_nl
        exit
        :read_common_at_end
}

:write_word_arr [ 
        0x5B           # POP BX
        0x58           # POP AX
        0x89 0x07      # MOV [BX], AX
] :write_word_arr_end
:write_byte_arr [ 
        0x5B           # POP BX
        0x58           # POP AX
        0x88 0x07      # MOV [BX], AL
] :write_byte_arr_end
:read_byte_arr [
        0x5B           # POP BX
        0x8A 0x07      # MOV AL, [BX]
        0x32 0xE4      # XOR AH, AH
] :read_byte_arr_end
:read_word_arr [
        0x5B           # POP BX
        0xFF 0x37      # PUSH [BX]
] :read_word_arr_end
:shift_return_arr [
        0x8B 0x46 0x02 # MOV AX, [BP+2]
        0x87 0x46 0x00 # XCHG [BP], AX
        0x87 0x46 0xFE # XCHG [BP-2], AX
        0x89 0x46 0x02 # MOV [BP+2], AX
        0x83 0xED 0x02 # SUB BP, 2
] :shift_return_arr_end
:shift_arg_arr [
        0x83 0xC5 0x02 # ADD BP, 2
        0x8B 0x46 0x02 # MOV AX, [BP+2]
        0x87 0x46 0xFE # XCHG [BP-2], AX
        0x87 0x46 0x00 # XCHG [BP], AX
        0x89 0x46 0x02 # MOV [BP+2], AX
] :shift_arg_arr_end

# The last 2 boolean flags are whether the sequence assumes the top of the
# stack initially to be in AX, and whether it leaves the top of the stack
# in AX.
:dollar_char_arrs [
        '* $write_word_arr $write_word_arr_end 0 0
        '+ $write_byte_arr $write_byte_arr_end 0 0
        '- $read_byte_arr $read_byte_arr_end 0 1
        '/ $read_word_arr $read_word_arr_end 0 0
        ': $shift_return_arr $shift_return_arr_end 0 0
        '; $shift_arg_arr $shift_arg_arr_end 0 0
        0 $0 $0 0 0
]

:cond_arr [
        0x85 0xC0      # TEST AX, AX
        0x74           # JZ ...
] :cond_arr_end

:read_common_dollar :0 { $;
        @0 '$ = $? {
                read_token
                @1 '{ = $? {} {
                        put_location
                        $str_skip_unknown puts
                        put_nl
                        exit
                }
                next_index
                fence_push
                0xE9 emit_byte  # JMP label1
                @2 find_ilabel $str_skip calc_disp8 emit_byte
                read_text_block
                fence_push
                @2 $cur_ip $/ add_ilabel  # label1:
                @read_common_dollar_end
        } {}
        @0 '? = $? {
                read_if
                @read_common_dollar_end
        } {}
        @0 '@ = $? {
                read_while
                @read_common_dollar_end
        } {}

        $dollar_char_arrs
        $@ { @1 $- @0 = 1 ^ } {
                @1 $- $? {} {
                        put_location
                        $str_dollar_unknown_cmd puts
                        @0 putchar
                        put_nl
                        @read_common_dollar_end
                }
                @1 7 + @=1
        }
        @1 5 + $- $? { pop_ax } { fence_push }
        @1 1 + $/ @1 3 + $/ emit_array
        @1 6 + $- $? { push_ax } {}

        :read_common_dollar_end
}

:read_if :0 {
        read_token
        @0 '{ = $? {} {
                put_location
                $str_if_unknown1 puts
                put_nl
                exit
        }
        next_index next_index
        pop_ax
        $cond_arr $cond_arr_end emit_array
        @1 find_ilabel $str_if calc_disp8 emit_byte # ... label1
        read_text_block
        fence_push
        0xEB emit_byte              # jmp label2
        @2 find_ilabel $str_if calc_disp8 emit_byte
        @1 $cur_ip $/ add_ilabel    # label1:
        read_token
        @3 '{ = $? {} {
                put_location
                $str_if_unknown2 puts
                put_nl
                exit
        }
        read_text_block
        fence_push
        @2 $cur_ip $/ add_ilabel    # label2:
}

:read_while :0 {
        read_token
        @0 '{ = $? {} { 
                put_location
                $str_while_unknown1 puts
                put_nl
                exit
        }
        next_index next_index
        fence_push
        @1 $cur_ip $/ add_ilabel    # label1:
        read_text_block
        pop_ax
        $cond_arr $cond_arr_end emit_array
        @2 find_ilabel $str_while calc_disp8 emit_byte # ... label2
        read_token
        @3 '{ = $? {} {
                put_location
                $str_while_unknown2 puts
                put_nl
                exit
        }
        read_text_block
        fence_push
        0xEB emit_byte              # jmp label1
        @1 find_ilabel $str_while calc_disp8 emit_byte
        @2 $cur_ip $/ add_ilabel    # :label2
}

:include_file :0 { $;
        $in_name_ptr $/
        $in_handle $/
        $cur_line $/
        $cur_column $/

        @0 $in_name_ptr $*
        process_file

        $cur_column $*
        $cur_line $*
        $in_handle $*
        $in_name_ptr $*
}

# Open a file from $in_name_ptr, do a single pass, and close the file.
:process_file :0 {
        $in_name_ptr $/ test_add_included . .
        $in_name_ptr $/ 0 handle_open
        $? { file_error } {}
        $in_handle $*
        1 $cur_line $*
        1 $cur_column $*
        read_data_block
        $in_handle $/ handle_close
        $? { file_error } {}
}

:in_name_ptr [ $0 ]
:out_name_ptr [ $0 ]

:main :0 { $;
        # Parse arguments
        $@ { @0 $- '  = } { @0 1 + @=0 }
        @0 $- 0x0D = $? {
                $str_usage puts
                exit
        } {}
        @0 $in_name_ptr $*
        $@ { @0 $- '  = 1 ^ } {
                @0 $- 0x0D = $? {
                        $str_usage puts
                        exit
                } {}
                @0 1 + @=0
        }
        0 @0 $+ @0 1 + @=0
        $@ { @0 $- '  = } { @0 1 + @=0 }
        @0 $- 0x0D = $? {
                $str_usage puts
                exit
        } {}
        @0 $out_name_ptr $*
        $@ { @0 $- '  = @0 $- 0x0D = | 1 ^ } {
                @0 1 + @=0
        }
        0 @0 $+ @0 1 + @=0
        
        $out_name_ptr $/ 0 handle_creat
        $? { file_error } {}
        $out_handle $* 

        0 $emit_mode $+
        0x100 $cur_ip $*
        0 $cur_index $*
        process_file

        1 $emit_mode $+
        0x100 $cur_ip $*
        0 $cur_index $*
        0 $included $*
        process_file

        $out_handle $/ handle_close
        $? { file_error } {}

        exit
}

:str_counting [ '('c'o'u'n't'i'n'g') 0 ]
:str_emitting [ '('e'm'i't't'i'n'g') 0 ]
:put_location :0 {
        $in_name_ptr $/ puts
        ': putchar
        $cur_line $/ put_dec
        ': putchar
        $cur_column $/ put_dec
        '  putchar
        $emit_mode $- $? { $str_emitting } { $str_counting } puts
        ': putchar
        '  putchar
}

:str_skip [ '$'$ 0 ]
:str_if [ '$'? 0 ]
:str_while [ '$'@ 0 ]
:str_check1 [ ' 'b'l'o'c'k' 'i's' 't'o'o' 'l'a'r'g'e',' 'j'u'm'p
        ' 't'a'r'g'e't'  0 ]
:str_check2 [ ' 'i's' 't'o'o' 'f'a'r' 'f'r'o'm' 's'o'u'r'c'e'  0 ]
:calc_disp8 :0 { $; $;
        @0 $cur_ip $/ 1 + -
        $emit_mode $- $? {
                @2 0x80 < 0xFF7F @2 < | $? {} {
                        put_location
                        @1 puts
                        $str_check1 puts
                        @0 put_hex16
                        $str_check2 puts
                        $cur_ip $/ 1 + put_hex16
                        put_nl
                }
        } {}
        @=0 $:
}

:str_usage [ 'U's'a'g'e':' 'S'T'R'A'P' '<'I'n'p'u't'.'s't'r'>
        ' '<'O'u't'p'u't'.'c'o'm'> 0x0D 0x0A 0 ]

:str_file_error [ 'F'i'l'e' 'e'r'r'o'r 0 ]

:str_undef_label [ 'u'n'd'e'f'i'n'e'd' 'l'a'b'e'l':'  0 ]
:str_redef_label [ 'r'e'd'e'f'i'n'e'd' 'l'a'b'e'l':'  0 ]
:str_dollar_eob [ '$' 'f'o'l'l'o'w'e'd' 'b'y' 'e'n'd' 'o'f' 'b'l'o'c'k 0 ]
:str_unknown_cmd [ 'u'n'k'n'o'w'n' 'c'o'm'm'a'n'd':'  0 ]
:str_frame_unknown [ ':'<'n'u'm'b'e'r'>' 'n'o't' 'f'o'l'l'o'w'e'd
        ' 'b'y' '{ 0 ]
:str_colon_unknown [ ':' 'n'o't' 'f'o'l'l'o'w'e'd' 'b'y' 'n'u'm'b'e'r' 'o'r
        ' 'i'd'e'n't'i'f'i'e'r 0 ]
:str_toloc_unknown [ '@'=' 'n'o't' 'f'o'l'l'o'w'e'd' 'b'y' 'n'u'm'b'e'r 0 ]
:str_at_unknown [ '@' 'n'o't' 'f'o'l'l'o'w'e'd' 'b'y' 'n'u'm'b'e'r',
        ' 'i'd'e'n't'i'f'i'e'r',' 'o'r' '= 0 ]
:str_skip_unknown [ '$'$' 'n'o't' 'f'o'l'l'o'w'e'd' 'b'y' '{ 0 ]
:str_if_unknown1 [ '$'?' 'n'o't' 'f'o'l'l'o'w'e'd' 'b'y' '{ 0 ]
:str_if_unknown2 [ '$'?'{'}' 'n'o't' 'f'o'l'l'o'w'e'd' 'b'y' '{ 0 ]
:str_while_unknown1 [ '$'@' 'n'o't' 'f'o'l'l'o'w'e'd' 'b'y' '{ 0 ]
:str_while_unknown2 [ '$'@'{'}' 'n'o't' 'f'o'l'l'o'w'e'd' 'b'y' '{ 0 ]
:str_dollar_unknown_cmd [ 'u'n'k'n'o'w'n' 'c'o'm'm'a'n'd':' '$ 0 ]

:heap_start
